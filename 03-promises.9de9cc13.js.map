{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA2BA,SAASC,EAAcC,GAYrB,OAXgB,IAAIC,SAAQ,CAACC,EAAKC,KAChC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,IAEAC,GAAK,GAENH,EAAM,G,CAlCAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBACF,MACEC,UAAUb,MAAEA,EAAKc,KAAEA,EAAIC,OAAEA,IACvBJ,EAAEK,cACN,IAAIC,EAAaC,OAAOlB,EAAMmB,OAE9B,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAOI,MAAOC,IACjCrB,EAAckB,GACXI,MAAK,KACJxB,EAAAyB,OAAOC,QAAQ,uBAAqBH,QAAUH,MAAe,IAE9DO,OAAM,KACL3B,EAAAyB,OAAOG,QAAQ,sBAAoBL,QAAQH,MAAe,IAE9DA,GAAcC,OAAOJ,EAAKK,OAG5BR,EAAEK,cAAcU,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', submitForm);\n\nfunction submitForm(e) {\n  e.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n  let delayValue = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i++) {\n    createPromise(delayValue)\n      .then(() => {\n        Notify.success(`✅ Fulfilled promise ${i} in ${delayValue}ms`);\n      })\n      .catch(() => {\n        Notify.failure(`❌ Rejected promise ${i} in ${delayValue}ms`);\n      });\n    delayValue += Number(step.value);\n  }\n\n  e.currentTarget.reset();\n}\n\nfunction createPromise(delay) {\n  const promise = new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        res();\n      } else {\n        rej();\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","delay","Promise","res","rej","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","elements","step","amount","currentTarget","delayValue","Number","value","i","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.9de9cc13.js.map"}